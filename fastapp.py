import os
import sys
import uvicorn
import importlib.util
from pathlib import Path
from fastapi import FastAPI, APIRouter, Request
from fastapi.responses import HTMLResponse, Response
from fastapi.staticfiles import StaticFiles
from jinja2 import Environment, FileSystemLoader, select_autoescape
from dotenv import load_dotenv
import re


class FastAppRouter(APIRouter):
    def __init__(self, jinja_env=None, template_base=None, **kwargs):
        super().__init__(**kwargs)
        self.jinja_env = jinja_env
        self.template_base = template_base  # folder for this route's templates
        self.app_dir: Path  # will be set by FastApp when importing this router

    def render(self, context: dict | None = None, template_name: str | None = None):
        if not self.jinja_env:
            raise RuntimeError("No Jinja environment configured.")

        if template_name is None:
            template_name = "+page.jinja"

        if self.template_base and hasattr(self, "app_dir"):
            relative_path = str(
                Path(self.template_base).relative_to(self.app_dir) / template_name
            )
        else:
            relative_path = template_name

        template = self.jinja_env.get_template(relative_path)
        return HTMLResponse(template.render(context or {}))


class FastApp:
    def __init__(self, app_dir="app", static_dir="static"):
        load_dotenv(dotenv_path=Path(".env"))

        self.app_dir = Path(app_dir)
        self.static_dir = Path(static_dir)
        self.app = FastAPI()

        # Global Jinja environment
        template_dirs = []
        if Path("templates").exists():
            template_dirs.append("templates")
        template_dirs.append(str(self.app_dir))  # always include app directory

        self.jinja_env = Environment(
            loader=FileSystemLoader(template_dirs),
            autoescape=select_autoescape(["html", "jinja"]),
        )

        # Mount static dir if it exists
        if self.static_dir.exists():
            self.app.mount(
                "/static", StaticFiles(directory=str(self.static_dir)), name="static"
            )

        # Load routes recursively
        self._load_routes(self.app_dir, "")

    def _load_routes(self, base_dir: Path, parent_route: str):
        def normalize(path):
            return re.sub(r"\{([^/]+)\}", r"{\1}", path)

        for item in base_dir.iterdir():
            route_path = normalize(parent_route)

            if item.name == "+page.py":
                router = self._import_router(item)
                if router:
                    self.app.include_router(router, prefix=route_path or "")
                continue

            if item.name == "+page.jinja" and not (base_dir / "+page.py").exists():
                router = FastAppRouter(jinja_env=self.jinja_env, template_base=base_dir)

                template_path = str(base_dir.relative_to(self.app_dir) / "+page.jinja")

                @router.get("/")
                async def autogenerated():
                    return router.render(template_name=template_path)  # type: ignore

                self.app.include_router(router, prefix=route_path or "")
                continue

            if item.is_dir():
                folder_route = normalize(f"{route_path}/{item.name}")
                self._load_routes(item, folder_route)

    def _import_router(self, file_path: Path):
        spec = importlib.util.spec_from_file_location(file_path.stem, file_path)
        assert spec and spec.loader, f"Failed to load {file_path}"
        module = importlib.util.module_from_spec(spec)
        spec.loader.exec_module(module)
        router = getattr(module, "router", None)

        if router and isinstance(router, FastAppRouter):
            router.jinja_env = self.jinja_env
            router.template_base = file_path.parent
            router.app_dir = self.app_dir

        return router

    def _add_static_template(self, route_path: str, template_file: Path):
        @self.app.get(route_path, response_class=HTMLResponse)
        async def static_page(request: Request):
            template = self.jinja_env.get_template(
                str(template_file.relative_to(self.app_dir))
            )
            return template.render({})

    def run(self):
        """
        Run using uvicorn with an import string so reload/workers work.
        Assumes this instance is assigned to `app` in the main module.
        """
        host = os.getenv("HOST", "127.0.0.1")
        port = int(os.getenv("PORT", "8000"))
        reload = os.getenv("RELOAD", "true").lower() == "true"

        # Guess the main module name and build import string
        main_module = Path(sys.argv[0]).stem  # e.g. "main"
        import_string = (
            f"{main_module}:app.app"  # FastApp().app is the FastAPI instance
        )

        uvicorn.run(import_string, host=host, port=port, reload=reload)
